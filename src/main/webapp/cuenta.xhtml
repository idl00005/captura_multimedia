<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
      xmlns:f="http://xmlns.jcp.org/jsf/core">
<f:metadata>
   <f:viewAction action="#{loginController.checkRole}" />
</f:metadata>

<ui:composition template="/WEB-INF/templates/template.xhtml">
   <ui:define name="content">
      <h:head>
         <h:outputScript library="webjars" name="jquery/3.6.0/jquery.min.js" target="head" />
         <h:outputScript type="text/javascript">
            function displayImage(input) {
               if (input.files &amp;&amp; input.files[0]) {
                  var reader = new FileReader();

                  reader.onload = function(e) {
                     document.getElementById(&#39;profileImage&#39;).src = e.target.result;
                  }

                  reader.readAsDataURL(input.files[0]); // convert to base64 string
               }
            }

            const supported = 'mediaDevices' in navigator;

         </h:outputScript>
      </h:head>
      <div class="container" style="width: 50%;">
         <h:form enctype="multipart/form-data" id="myForm">
         <h2>Perfil de Usuario</h2>
            <div class="form-group my-1">
               <h:outputLabel for="imageUpload" value="Foto de perfil"/>
               <h:inputFile id="imageUpload" accept="image/*" styleClass="form-control" onchange="displayImage(this)" />
            </div>
            <div class="form-group my-1">
               <img id="profileImage" src="img/foto_perfil_por_defecto.webp" alt="profileImage" style="width: 100px; height: 100px;"/>
               <h:outputText escape="false" value="&lt;video id='player' style='display: none;'&gt;&lt;/video&gt;"/>

               <h:outputText escape="false" value="&lt;canvas id='canvas' style='display: none; width: 100px; height: 100px;'&gt;&lt;/canvas&gt;"/>
               <button class="btn btn-warning m-2" id="startCapture">Tomar imagen con la cámara</button>
               <button class="btn btn-warning m-2" id="capture">Capture</button>
               <button id="selectTextAreaButton" class="btn btn-warning m-2">Pegar (CTRL + V)</button>
               <textarea id="target" cols="15" rows="3" style="position: absolute; left: -9999px;">Paste an image here</textarea>
            </div>
         <div class="form-group my-1">
               <h:outputLabel for="nombre" value="Nombre"/>
               <h:inputText id="nombre" value="#{cuentaController.user.nombre}" readonly="true" styleClass="form-control"/>
            </div>
            <div class="form-group my-1">
               <h:outputLabel for="apellidos" value="Apellidos"/>
               <h:inputText id="apellidos" value="#{cuentaController.user.apellidos}" readonly="true" styleClass="form-control"/>
            </div>
            <div class="form-group my-1">
               <h:outputLabel for="dni" value="DNI"/>
               <h:inputText id="dni" value="#{cuentaController.user.dni}" readonly="true" styleClass="form-control"/>
            </div>
            <div class="form-group my-1">
               <h:outputLabel for="cp" value="Código Postal"/>
               <h:inputText id="cp" value="#{cuentaController.user.cp}" styleClass="form-control" required="true" requiredMessage="El campo no debe quedar vacio."/>
               <h:message for="cp" escape="false" style="color: red"></h:message>
            </div>
            <div class="form-group my-1">
               <h:outputLabel for="ciudad" value="Ciudad"/>
               <h:inputText id="ciudad" value="#{cuentaController.user.ciudad}" styleClass="form-control" required="true" requiredMessage="El campo no debe quedar vacio."/>
               <h:message for="ciudad" escape="false" style="color: red"></h:message>
            </div>
            <div class="form-group my-1">
               <h:outputLabel for="direccion" value="Dirección"/>
               <h:inputText id="direccion" value="#{cuentaController.user.direccion}" styleClass="form-control" required="true" requiredMessage="El campo no debe quedar vacio."/>
               <h:message for="direccion" escape="false" style="color: red"></h:message>
            </div>
            <div class="form-group my-1">
               <h:outputLabel for="telefono" value="Teléfono"/>
               <h:inputText id="telefono" value="#{cuentaController.user.telefono}" styleClass="form-control" required="true" requiredMessage="El campo no debe quedar vacio."/>
               <h:message for="telefono" escape="false" style="color: red"></h:message>
            </div>
            <div class="form-group my-1">
               <h:outputLabel for="email" value="Correo Electrónico"/>
               <h:inputText id="email" value="#{cuentaController.user.email}" styleClass="form-control" required="true" requiredMessage="El campo no debe quedar vacio."/>
               <h:message for="email" escape="false" style="color: red"></h:message>
            </div>
         <h:commandButton value="Actualizar" action="#{cuentaController.updateUser}" styleClass="btn btn-warning m-2">
         </h:commandButton>
         </h:form>

         <script type="text/javascript">
            document.addEventListener('DOMContentLoaded', function() {
               var profileImage = document.getElementById('profileImage');
               profileImage.addEventListener('dragover', function(e) {
                  e.preventDefault();
               }, false);
               profileImage.addEventListener('drop', function(e) {
                  e.preventDefault();
                  var file = e.dataTransfer.files[0];
                  var reader = new FileReader();
                  reader.onload = function(e) {
                     profileImage.src = e.target.result;
                  }
                  reader.readAsDataURL(file);
               }, false);
            });

            document.addEventListener('DOMContentLoaded', function() {
               var selectTextAreaButton = document.getElementById('selectTextAreaButton');
               var hiddenTextArea = document.getElementById('target');

               hiddenTextArea.addEventListener('paste', function(e) {
                  e.preventDefault();
                  var files = e.clipboardData.files;
                  if (files.length > 0) {
                     var file = files[0];
                     if (file.type.startsWith('image/')) { // Ensure the file is an image
                        var reader = new FileReader();
                        reader.onload = function(e) {
                           document.getElementById('profileImage').src = e.target.result;
                        }
                        reader.readAsDataURL(file);
                     }
                  }
               });

               selectTextAreaButton.addEventListener('click', function() {
                  event.preventDefault();
                  hiddenTextArea.select();
               });

               hiddenTextArea.focus();
            });


            document.addEventListener('DOMContentLoaded', function() {
               const player = document.getElementById('player');
               const canvas = document.getElementById('canvas');
               const context = canvas.getContext('2d');
               const captureButton = document.getElementById('capture');
               const startCaptureButton = document.getElementById('startCapture');
               const profileImage = document.getElementById('profileImage');

               const constraints = {
                  video: true,
               };

               //Ocultamos el botón de captura inicialmente
               captureButton.style.display = 'none';

               let stream; //

               startCaptureButton.addEventListener('click', (event) => {
                  event.preventDefault();

                  navigator.mediaDevices.getUserMedia(constraints).then((mediaStream) => {
                     player.srcObject = mediaStream;
                     player.play();
                     stream = mediaStream;
                  });

                  // Mostramos el elemento de video
                  player.style.display = 'block';

                  // Gestión del botón de captura, ocultando el de inicio de captura
                  captureButton.style.display = 'block';
                  startCaptureButton.style.visibility = 'hidden';
               });

               captureButton.addEventListener('click', (event) => {
                  event.preventDefault();

                  // Dibujamos el frame de video en el canvas
                  context.drawImage(player, 0, 0, canvas.width, canvas.height);

                  // Convertimos el canvas a una URL de datos y la establecemos como la fuente de profileImage
                  profileImage.src = canvas.toDataURL();

                  // Ocultamos nuevamente el video y el botón de captura
                  player.style.display = 'none';
                  captureButton.style.display = 'none';
                  startCaptureButton.style.visibility = 'visible';

                  // Dejamos de usar la camara
                  if (stream) {
                     stream.getTracks().forEach(track => track.stop());
                  }
               });
            });
         </script>

         <hr/>
         <p><strong>Duración de la membresía:</strong> 1 año</p>
      </div>

   </ui:define>
</ui:composition>
</html>








